import i18n from 'i18n';
import { IModel } from 'core/helpers/ModelManager';
import { DataManager, IData } from 'core/helpers/DataManager';
import reduceDataManager from 'store/helpers/reducers/asyncDataReducer';
import { TypesActionPersonnel } from './action';

const initialPersonnelState = DataManager.init<IModel>({
  columns: [
    {
      type: 'boolean',
      width: 150,
      field: 'active',
      title: i18n.t('ACTIVE'),
      render: 'booleanYes',
      align: 'center',
      defaultValue: true,
      export: true,
      resize: false,
      translationTag: 'ACTIVE',
    },
    {
      type: 'boolean',
      width: 150,
      field: 'is_active_collaborator',
      title: i18n.t('TEAMS'),
      render: 'booleanYes',
      align: 'center',
      defaultValue: false,
      export: true,
      resize: false,
      translationTag: 'TEAMS',
    },
    {
      type: 'boolean',
      width: 150,
      field: 'account_active',
      title: i18n.t('ACCOUNT'),
      render: 'booleanYes',
      align: 'center',
      defaultValue: false,
      export: true,
      resize: false,
      translationTag: 'ACCOUNT',
    },
    {
      type: 'string',
      width: 150,
      field: 'code',
      title: i18n.t('CODE'),
      import: true,
      export: true,
      translationTag: 'CODE',
    },
    {
      type: 'string',
      width: 150,
      field: 'first_name',
      title: i18n.t('NAMES'),
      import: true,
      export: true,
      translationTag: 'NAMES',
    },
    {
      type: 'string',
      width: 150,
      field: 'last_name',
      title: i18n.t('LAST_NAMES'),
      import: true,
      export: true,
      translationTag: 'LAST_NAMES',
    },
    {
      type: 'string',
      width: 150,
      field: 'full_name',
      export: true,
    },
    {
      type: 'string',
      field: 'path_image',
    },
    {
      type: 'string',
      field: 'path_signature',
    },
    {
      type: 'numeric',
      field: 'id_group_1',
      allowNull: true,
    },
    {
      type: 'numeric',
      field: 'id_group_2',
      allowNull: true,
    },
    {
      type: 'string',
      width: 150,
      field: 'groups_1_description',
      title: i18n.t('GROUP_1'),
      import: true,
      export: true,
      translationTag: 'GROUP_1',
    },
    {
      type: 'string',
      width: 150,
      field: 'groups_2_description',
      title: i18n.t('GROUP_2'),
      import: true,
      export: true,
      translationTag: 'GROUP_2',
    },
    {
      type: 'string',
      width: 200,
      field: 'email',
      title: i18n.t('EMAIL'),
      import: true,
      export: true,
      translationTag: 'EMAIL',
    },
    {
      type: 'numeric',
      field: 'id_asset_location',
      export: true,
      allowNull: true,
    },
    {
      type: 'string',
      width: 300,
      field: 'asset_location_description',
      title: i18n.t('LOCATION'),
      export: true,
      translationTag: 'LOCATION',
    },
    {
      type: 'numeric',
      field: 'id_hourly_rate',
      allowNull: true,
    },
    {
      type: 'string',
      width: 200,
      field: 'hourly_rates_description',
      title: i18n.t('HOURLY_RATE'),
      import: true,
      export: true,
      translationTag: 'HOURLY_RATE',
    },
    {
      type: 'numeric',
      field: 'id_work_shift',
      allowNull: true,
    },
    {
      type: 'string',
      width: 200,
      field: 'description_work_shifts',
      title: i18n.t('WORK_SHIFT'),
      import: true,
      export: true,
      translationTag: 'WORK_SHIFT',
    },
    {
      type: 'numeric',
      field: 'id_working_days_time',
      allowNull: true,
    },
    {
      type: 'string',
      width: 200,
      field: 'schedule_teams',
      import: true,
      export: true,
    },
    {
      type: 'string',
      width: 300,
      field: 'address',
      title: i18n.t('ADDRESS'),
      import: true,
      export: true,
      translationTag: 'ADDRESS',
    },
    {
      type: 'string',
      width: 200,
      field: 'country',
      title: i18n.t('COUNTRY'),
      import: true,
      export: true,
      translationTag: 'COUNTRY',
    },
    {
      type: 'string',
      width: 200,
      field: 'state',
      title: i18n.t('STATE'),
      import: true,
      export: true,
      translationTag: 'STATE',
    },
    {
      type: 'string',
      width: 150,
      field: 'city',
      title: i18n.t('CITY'),
      import: true,
      export: true,
      translationTag: 'CITY',
    },
    {
      type: 'string',
      width: 150,
      field: 'zip_code',
      title: i18n.t('ZIP_CODE'),
      import: true,
      export: true,
      translationTag: 'ZIP_CODE',
    },
    {
      type: 'numeric',
      field: 'latitude',
      defaultValue: -33.4263375,
      allowNull: true,
    },
    {
      type: 'numeric',
      field: 'longitud',
      defaultValue: -70.6121675,
      allowNull: true,
    },
    {
      type: 'string',
      width: 150,
      field: 'telephone',
      title: i18n.t('TELEPHONE'),
      import: true,
      export: true,
      translationTag: 'TELEPHONE',
    },
    {
      type: 'string',
      width: 150,
      field: 'telephone_2',
      title: i18n.t('TELEPHONE_2'),
      import: true,
      export: true,
      translationTag: 'TELEPHONE_2',
    },
    {
      type: 'string',
      width: 150,
      field: 'sms',
      title: i18n.t('TELEPHONE_SMS'),
      import: true,
      export: true,
      translationTag: 'TELEPHONE_SMS',
    },
    {
      type: 'numeric',
      field: 'id_custom_field_group',
      defaultValue: null,
      allowNull: true,
      hidden: true,
      import: false,
    },
    {
      type: 'string',
      width: 300,
      field: 'custom_fields_groups_description',
      title: i18n.t('GROUP_CUSTOM_FIELD'),
      export: true,
      filter: {
        type: 'list',
        source: 'personnel.custom_fields_groups_list',
        customFieldsApi: 'personnel.custom_fields_list',
      },
      translationTag: 'GROUP_CUSTOM_FIELD',
    },
  ],
  api: {
    list: 'personnel.personnel_list',
    delete: 'personnel.personnel_delete',
    create: 'personnel.personnel_insert',
    update: 'personnel.personnel_update',
  },
  validators: {
    first_name: {
      presence: {
        allowEmpty: false,
      },
      length: {
        minimum: 2,
        maximum: 200,
      },
    },
  },
});

const reducePersonnel = reduceDataManager<IModel, IData<IModel>>(
  TypesActionPersonnel,
  initialPersonnelState,
);

export default reducePersonnel;
